1. Player Transformation 과정

  (1) 레이를 맞춘 사물 마우스 클릭시 변신 과정
  
   - 레이를 맞은게 true라면 기존 플레이어 오브젝트 파괴시키고 "변신완료" 디버그 출력은 가능했으나, 레이를 맞은 오브젝트를 가져오는 데 실패함.
   - GameObject hitObject = FindObjectOfType<HitObject>().gameObject; 를 이용해 hitObject를 플레이어 오브젝트로 대입시키려 했으나 프리펩 자체를 가져오지 못함.
   
   --> 그래서 Instantiate로 hit에 저장된, LayerMask 가 "ObjectTarget"인 오브젝트를 생성하려 함.
   
   - 문제는 ObjectAwareness 스크립트에서 레이캐스트 hit의 저장 정보를 playerTransform 스크립트로 가져와서 마우스 클릭 시 intantiate 할 것인가이다.
   
   --> 우선, objectAwareness 스크립트에서 Awareness() 함수 실행 시 레이캐스트 hit에 저장된 gameobject를 hitGameobject라는 게임오브젝트로 저장한다.
   --> objectAwareness 스크립트의 hitGameobject를 게임오브젝트로 하여 기존 플레이어의 위치에 instantiate 한다.
   --> 그 다음 기존 플레이어 컴포넌트들을 instantiate 오브젝트에 가져오고 변신하면서 3인칭 카메라로 전환되게 한다.
  
  
  (2) instantiate 된 hitGameobject의 Rotation
  
   - instantiate 된 오브젝트의 Rotation을 고정시키기 위해 RigidbodyConstraints.FreezeRotation 을 이용하여 X축과 Z축을 고정시키려함.   
   - hitObject.Constraints = RigidbodyConstraints.FreezeRotationX;
     hitObject.Constraints = RigidbodyConstraints.FreezeRotationZ;
     
   - 위 처럼 했으나 Z축만 고정이 됨.
   
   --> " | " 를 이용해 해결 가능함을 알게됨.
   --> hitObject.Constraints = RigidbodyConstraints.FreezeRotationX | RigidbodyConstraints.FreezeRotationZ;
   
   
  (3) instantiate 오브젝트에 기존 플레이어 스크립트 추가와 스크립트 변수 그대로 가져오기.
  
   - Addcomponent를 이용해 기존 플레이어와 똑같이 스크립트 추가는 가능한데 새 스크립트를 가져오므로 기존 플레이어 스크립트 설정은 초기화가 됨.
   - 
